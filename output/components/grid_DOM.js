/* templates/components/grid.svelte generated by Svelte v3.47.0 */
import {
	SvelteComponentDev,
	add_location,
	append_hydration_dev,
	append_styles,
	attr_dev,
	children,
	claim_element,
	claim_text,
	destroy_each,
	detach_dev,
	dispatch_dev,
	element,
	empty,
	init,
	insert_hydration_dev,
	noop,
	safe_not_equal,
	set_data_dev,
	text,
	validate_each_argument,
	validate_slots
} from "svelte/internal";

import { sortByDate } from '../scripts/sort_by_date.svelte';
const file = "templates/components/grid.svelte";

function add_css(target) {
	append_styles(target, "svelte-mjwerd", ".grid.svelte-mjwerd.svelte-mjwerd{display:grid;grid-template-columns:repeat(3, 1fr);grid-column-gap:10px;grid-row-gap:10px}.grid.svelte-mjwerd .grid-item.svelte-mjwerd{display:flex;flex-grow:1;height:180px;padding:10px;align-items:center;justify-content:center;background:var(--primary);font-weight:bold;border-radius:5px;color:white;text-align:center}a.svelte-mjwerd.svelte-mjwerd::before{content:none}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[3] = list[i];
	child_ctx[5] = i;
	return child_ctx;
}

// (8:4) {#if i >= postRangeLow && i < postRangeHigh}
function create_if_block(ctx) {
	let a;
	let t_value = /*item*/ ctx[3].fields.title + "";
	let t;
	let a_href_value;

	const block = {
		c: function create() {
			a = element("a");
			t = text(t_value);
			this.h();
		},
		l: function claim(nodes) {
			a = claim_element(nodes, "A", { class: true, href: true });
			var a_nodes = children(a);
			t = claim_text(a_nodes, t_value);
			a_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(a, "class", "grid-item svelte-mjwerd");
			attr_dev(a, "href", a_href_value = /*item*/ ctx[3].path);
			add_location(a, file, 8, 6, 245);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, a, anchor);
			append_hydration_dev(a, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*items*/ 1 && t_value !== (t_value = /*item*/ ctx[3].fields.title + "")) set_data_dev(t, t_value);

			if (dirty & /*items*/ 1 && a_href_value !== (a_href_value = /*item*/ ctx[3].path)) {
				attr_dev(a, "href", a_href_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(a);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(8:4) {#if i >= postRangeLow && i < postRangeHigh}",
		ctx
	});

	return block;
}

// (7:2) {#each sortByDate(items) as item, i}
function create_each_block(ctx) {
	let if_block_anchor;
	let if_block = /*i*/ ctx[5] >= /*postRangeLow*/ ctx[1] && /*i*/ ctx[5] < /*postRangeHigh*/ ctx[2] && create_if_block(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_hydration_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (/*i*/ ctx[5] >= /*postRangeLow*/ ctx[1] && /*i*/ ctx[5] < /*postRangeHigh*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(7:2) {#each sortByDate(items) as item, i}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let div;
	let each_value = sortByDate(/*items*/ ctx[0]);
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div_nodes);
			}

			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "grid svelte-mjwerd");
			add_location(div, file, 5, 0, 132);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*sortByDate, items, postRangeLow, postRangeHigh*/ 7) {
				each_value = sortByDate(/*items*/ ctx[0]);
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Grid', slots, []);
	let { items, postRangeLow, postRangeHigh } = $$props;
	const writable_props = ['items', 'postRangeLow', 'postRangeHigh'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Grid> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('items' in $$props) $$invalidate(0, items = $$props.items);
		if ('postRangeLow' in $$props) $$invalidate(1, postRangeLow = $$props.postRangeLow);
		if ('postRangeHigh' in $$props) $$invalidate(2, postRangeHigh = $$props.postRangeHigh);
	};

	$$self.$capture_state = () => ({
		sortByDate,
		items,
		postRangeLow,
		postRangeHigh
	});

	$$self.$inject_state = $$props => {
		if ('items' in $$props) $$invalidate(0, items = $$props.items);
		if ('postRangeLow' in $$props) $$invalidate(1, postRangeLow = $$props.postRangeLow);
		if ('postRangeHigh' in $$props) $$invalidate(2, postRangeHigh = $$props.postRangeHigh);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [items, postRangeLow, postRangeHigh];
}

class Grid extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(
			this,
			options,
			instance,
			create_fragment,
			safe_not_equal,
			{
				items: 0,
				postRangeLow: 1,
				postRangeHigh: 2
			},
			add_css
		);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Grid",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*items*/ ctx[0] === undefined && !('items' in props)) {
			console.warn("<Grid> was created without expected prop 'items'");
		}

		if (/*postRangeLow*/ ctx[1] === undefined && !('postRangeLow' in props)) {
			console.warn("<Grid> was created without expected prop 'postRangeLow'");
		}

		if (/*postRangeHigh*/ ctx[2] === undefined && !('postRangeHigh' in props)) {
			console.warn("<Grid> was created without expected prop 'postRangeHigh'");
		}
	}

	get items() {
		throw new Error("<Grid>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set items(value) {
		throw new Error("<Grid>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get postRangeLow() {
		throw new Error("<Grid>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set postRangeLow(value) {
		throw new Error("<Grid>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get postRangeHigh() {
		throw new Error("<Grid>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set postRangeHigh(value) {
		throw new Error("<Grid>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Grid;