/* templates/global/head.svelte generated by Svelte v3.47.0 */
import {
	SvelteComponentDev,
	add_location,
	append_hydration_dev,
	attr_dev,
	children,
	claim_element,
	claim_space,
	claim_text,
	detach_dev,
	dispatch_dev,
	element,
	init,
	insert_hydration_dev,
	noop,
	safe_not_equal,
	set_data_dev,
	space,
	src_url_equal,
	text,
	validate_slots
} from "svelte/internal";

const file = "templates/global/head.svelte";

function create_fragment(ctx) {
	let head;
	let meta0;
	let t0;
	let meta1;
	let t1;
	let title_1;
	let t2;
	let t3;
	let base;
	let base_href_value;
	let t4;
	let script;
	let script_src_value;
	let t5;
	let link0;
	let t6;
	let link1;
	let t7;
	let link2;
	let t8;
	let link3;

	const block = {
		c: function create() {
			head = element("head");
			meta0 = element("meta");
			t0 = space();
			meta1 = element("meta");
			t1 = space();
			title_1 = element("title");
			t2 = text(/*title*/ ctx[0]);
			t3 = space();
			base = element("base");
			t4 = space();
			script = element("script");
			t5 = space();
			link0 = element("link");
			t6 = space();
			link1 = element("link");
			t7 = space();
			link2 = element("link");
			t8 = space();
			link3 = element("link");
			this.h();
		},
		l: function claim(nodes) {
			head = claim_element(nodes, "HEAD", {});
			var head_nodes = children(head);
			meta0 = claim_element(head_nodes, "META", { charset: true });
			t0 = claim_space(head_nodes);
			meta1 = claim_element(head_nodes, "META", { name: true, content: true });
			t1 = claim_space(head_nodes);
			title_1 = claim_element(head_nodes, "TITLE", {});
			var title_1_nodes = children(title_1);
			t2 = claim_text(title_1_nodes, /*title*/ ctx[0]);
			title_1_nodes.forEach(detach_dev);
			t3 = claim_space(head_nodes);
			base = claim_element(head_nodes, "BASE", { href: true });
			t4 = claim_space(head_nodes);
			script = claim_element(head_nodes, "SCRIPT", { type: true, src: true });
			var script_nodes = children(script);
			script_nodes.forEach(detach_dev);
			t5 = claim_space(head_nodes);
			link0 = claim_element(head_nodes, "LINK", { href: true, rel: true });
			t6 = claim_space(head_nodes);
			link1 = claim_element(head_nodes, "LINK", { rel: true, type: true, href: true });
			t7 = claim_space(head_nodes);
			link2 = claim_element(head_nodes, "LINK", { rel: true, href: true });
			t8 = claim_space(head_nodes);
			link3 = claim_element(head_nodes, "LINK", { rel: true, href: true });
			head_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(meta0, "charset", "utf-8");
			add_location(meta0, file, 5, 2, 54);
			attr_dev(meta1, "name", "viewport");
			attr_dev(meta1, "content", "width=device-width,initial-scale=1");
			add_location(meta1, file, 6, 2, 79);
			add_location(title_1, file, 8, 2, 150);
			attr_dev(base, "href", base_href_value = /*env*/ ctx[1].baseurl);
			add_location(base, file, 10, 2, 178);
			attr_dev(script, "type", "module");
			if (!src_url_equal(script.src, script_src_value = "spa/core/main.js")) attr_dev(script, "src", script_src_value);
			add_location(script, file, 11, 2, 208);
			attr_dev(link0, "href", "https://fonts.googleapis.com/css2?family=Rubik:ital,wght@0,300;0,700;1,300&display=swap");
			attr_dev(link0, "rel", "stylesheet");
			add_location(link0, file, 13, 2, 266);
			attr_dev(link1, "rel", "icon");
			attr_dev(link1, "type", "image/svg+xml");
			attr_dev(link1, "href", "logo.svg");
			add_location(link1, file, 14, 2, 387);
			attr_dev(link2, "rel", "stylesheet");
			attr_dev(link2, "href", "global.css");
			add_location(link2, file, 15, 2, 444);
			attr_dev(link3, "rel", "stylesheet");
			attr_dev(link3, "href", "spa/bundle.css");
			add_location(link3, file, 16, 2, 488);
			add_location(head, file, 4, 0, 45);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, head, anchor);
			append_hydration_dev(head, meta0);
			append_hydration_dev(head, t0);
			append_hydration_dev(head, meta1);
			append_hydration_dev(head, t1);
			append_hydration_dev(head, title_1);
			append_hydration_dev(title_1, t2);
			append_hydration_dev(head, t3);
			append_hydration_dev(head, base);
			append_hydration_dev(head, t4);
			append_hydration_dev(head, script);
			append_hydration_dev(head, t5);
			append_hydration_dev(head, link0);
			append_hydration_dev(head, t6);
			append_hydration_dev(head, link1);
			append_hydration_dev(head, t7);
			append_hydration_dev(head, link2);
			append_hydration_dev(head, t8);
			append_hydration_dev(head, link3);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*title*/ 1) set_data_dev(t2, /*title*/ ctx[0]);

			if (dirty & /*env*/ 2 && base_href_value !== (base_href_value = /*env*/ ctx[1].baseurl)) {
				attr_dev(base, "href", base_href_value);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(head);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Head', slots, []);
	let { title, env } = $$props;
	const writable_props = ['title', 'env'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Head> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('title' in $$props) $$invalidate(0, title = $$props.title);
		if ('env' in $$props) $$invalidate(1, env = $$props.env);
	};

	$$self.$capture_state = () => ({ title, env });

	$$self.$inject_state = $$props => {
		if ('title' in $$props) $$invalidate(0, title = $$props.title);
		if ('env' in $$props) $$invalidate(1, env = $$props.env);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [title, env];
}

class Head extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { title: 0, env: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Head",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*title*/ ctx[0] === undefined && !('title' in props)) {
			console.warn("<Head> was created without expected prop 'title'");
		}

		if (/*env*/ ctx[1] === undefined && !('env' in props)) {
			console.warn("<Head> was created without expected prop 'env'");
		}
	}

	get title() {
		throw new Error("<Head>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set title(value) {
		throw new Error("<Head>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get env() {
		throw new Error("<Head>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set env(value) {
		throw new Error("<Head>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Head;