/* templates/global/footer.svelte generated by Svelte v3.47.0 */
import {
	SvelteComponentDev,
	add_location,
	append_hydration_dev,
	append_styles,
	attr_dev,
	children,
	claim_element,
	claim_space,
	claim_text,
	destroy_each,
	detach_dev,
	dispatch_dev,
	element,
	init,
	insert_hydration_dev,
	noop,
	safe_not_equal,
	set_data_dev,
	space,
	text,
	validate_each_argument,
	validate_slots
} from "svelte/internal";

import { makeTitle } from '../scripts/make_title.svelte';
const file = "templates/global/footer.svelte";

function add_css(target) {
	append_styles(target, "svelte-c5bvyv", "footer.svelte-c5bvyv{min-height:200px;display:flex;align-items:center;background-color:var(--base-dark);margin-top:100px;flex-shrink:0}span.svelte-c5bvyv{color:var(--primary);font-weight:bold}a.svelte-c5bvyv{color:white;text-decoration:none;margin-left:10px}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[1] = list[i];
	return child_ctx;
}

// (9:4) {#each allContent as content}
function create_each_block(ctx) {
	let a;
	let t_value = makeTitle(/*content*/ ctx[1].filename) + "";
	let t;
	let a_href_value;

	const block = {
		c: function create() {
			a = element("a");
			t = text(t_value);
			this.h();
		},
		l: function claim(nodes) {
			a = claim_element(nodes, "A", { href: true, class: true });
			var a_nodes = children(a);
			t = claim_text(a_nodes, t_value);
			a_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(a, "href", a_href_value = /*content*/ ctx[1].path);
			attr_dev(a, "class", "svelte-c5bvyv");
			add_location(a, file, 9, 6, 210);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, a, anchor);
			append_hydration_dev(a, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*allContent*/ 1 && t_value !== (t_value = makeTitle(/*content*/ ctx[1].filename) + "")) set_data_dev(t, t_value);

			if (dirty & /*allContent*/ 1 && a_href_value !== (a_href_value = /*content*/ ctx[1].path)) {
				attr_dev(a, "href", a_href_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(a);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(9:4) {#each allContent as content}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let footer;
	let div;
	let span;
	let t0;
	let t1;
	let each_value = /*allContent*/ ctx[0];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			footer = element("footer");
			div = element("div");
			span = element("span");
			t0 = text("All content:");
			t1 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			footer = claim_element(nodes, "FOOTER", { class: true });
			var footer_nodes = children(footer);
			div = claim_element(footer_nodes, "DIV", { class: true });
			var div_nodes = children(div);
			span = claim_element(div_nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			t0 = claim_text(span_nodes, "All content:");
			span_nodes.forEach(detach_dev);
			t1 = claim_space(div_nodes);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div_nodes);
			}

			div_nodes.forEach(detach_dev);
			footer_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "class", "svelte-c5bvyv");
			add_location(span, file, 7, 4, 144);
			attr_dev(div, "class", "container");
			add_location(div, file, 6, 2, 116);
			attr_dev(footer, "class", "svelte-c5bvyv");
			add_location(footer, file, 5, 0, 105);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, footer, anchor);
			append_hydration_dev(footer, div);
			append_hydration_dev(div, span);
			append_hydration_dev(span, t0);
			append_hydration_dev(div, t1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*allContent, makeTitle*/ 1) {
				each_value = /*allContent*/ ctx[0];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(footer);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Footer', slots, []);
	let { allContent } = $$props;
	const writable_props = ['allContent'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Footer> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('allContent' in $$props) $$invalidate(0, allContent = $$props.allContent);
	};

	$$self.$capture_state = () => ({ allContent, makeTitle });

	$$self.$inject_state = $$props => {
		if ('allContent' in $$props) $$invalidate(0, allContent = $$props.allContent);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [allContent];
}

class Footer extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { allContent: 0 }, add_css);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Footer",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*allContent*/ ctx[0] === undefined && !('allContent' in props)) {
			console.warn("<Footer> was created without expected prop 'allContent'");
		}
	}

	get allContent() {
		throw new Error("<Footer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set allContent(value) {
		throw new Error("<Footer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Footer;